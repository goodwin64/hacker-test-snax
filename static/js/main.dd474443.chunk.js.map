{"version":3,"sources":["MovieForm.js","MoviesTable.js","MovieSearch.js","App.js","serviceWorker.js","index.js"],"names":["parseDuration","inputValue","isInMinutesFormat","toLowerCase","includes","amount","parseFloat","getMovieName","movie","name","getMovieDuration","duration","MovieForm","props","onSubmit","React","useState","setName","rating","setRating","setDuration","isFormInvalid","isFinite","Number","handleSubmit","e","preventDefault","ratings","htmlFor","type","id","onChange","target","value","onClick","disabled","MoviesTable","movies","length","map","key","getMovieRating","restMinutes","Math","floor","formatDuration","colSpan","MovieSearch","getVisibleMovies","search","sort","a","b","sortMovies","filter","App","allMovies","setAllMovies","setSearch","visibleMovies","movieToAdd","existingMovieIndex","findIndex","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd474443.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function parseDuration(inputValue) {\r\n  const isInMinutesFormat = inputValue.toLowerCase().includes('m');\r\n  const amount = parseFloat(inputValue);\r\n  const amountInMinutes = isInMinutesFormat ? amount : amount * 60;\r\n  return amountInMinutes;\r\n}\r\n\r\nexport function getMovieName(movie) {\r\n  return movie.name;\r\n}\r\n\r\nexport function getMovieRating(movie) {\r\n  return movie.ratings;\r\n}\r\n\r\nexport function getMovieDuration(movie) {\r\n  return movie.duration;\r\n}\r\n\r\nexport function MovieForm(props) {\r\n  const { onSubmit } = props;\r\n\r\n  const [name, setName] = React.useState('');\r\n  const [rating, setRating] = React.useState('');\r\n  const [duration, setDuration] = React.useState('');\r\n\r\n  const isFormInvalid = (\r\n    !name || !rating || !duration || !isFinite(Number(rating)) || !isFinite(parseFloat(duration))\r\n  );\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (isFormInvalid) {\r\n      return;\r\n    }\r\n    onSubmit({\r\n      name,\r\n      ratings: rating,\r\n      duration: parseDuration(duration),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name-input\">\r\n        <p>Movie name</p>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name-input\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </label>\r\n\r\n      <label htmlFor=\"ratings-input\">\r\n        <p>Ratings</p>\r\n        <input\r\n          type=\"text\"\r\n          id=\"ratings-input\"\r\n          onChange={(e) => setRating(e.target.value)}\r\n        />\r\n      </label>\r\n\r\n      <label htmlFor=\"duration-input\">\r\n        <p>Duration</p>\r\n        <input\r\n          type=\"text\"\r\n          id=\"duration-input\"\r\n          onChange={(e) => setDuration(e.target.value)}\r\n        />\r\n      </label>\r\n\r\n      <button\r\n        onClick={handleSubmit}\r\n        id=\"submit-button\"\r\n        disabled={isFormInvalid}\r\n      >\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { getMovieDuration, getMovieName, getMovieRating } from './MovieForm';\r\n\r\nexport function formatDuration(duration) {\r\n  if (duration >= 60) {\r\n    const restMinutes = duration % 60;\r\n    return `${Math.floor(duration / 60)}h ${restMinutes ? restMinutes + 'min' : ''}`;\r\n  } else {\r\n    return `${duration} min`;\r\n  }\r\n}\r\n\r\nexport function MoviesTable(props) {\r\n  const { movies } = props;\r\n  return (\r\n    <table id={'directory-table'}>\r\n      <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Ratings</th>\r\n        <th>Duration</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {\r\n        movies.length\r\n          ? movies.map(movie => (\r\n            <tr key={getMovieName(movie)}>\r\n              <td>{getMovieName(movie)}</td>\r\n              <td>{getMovieRating(movie)}</td>\r\n              <td>{formatDuration(getMovieDuration(movie))}</td>\r\n            </tr>\r\n          ))\r\n          : (\r\n            <tr id={'no-result'}>\r\n              <td colSpan={3}>No Results Found</td>\r\n            </tr>\r\n          )\r\n      }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport function MovieSearch(props) {\r\n  return (\r\n    <label htmlFor=\"search-input\">\r\n      <p>Search</p>\r\n      <input\r\n        type=\"text\"\r\n        id=\"search-input\"\r\n        onChange={e => props.onChange(e.target.value)}\r\n        value={props.value}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { getMovieDuration, getMovieName, MovieForm } from './MovieForm';\nimport { MoviesTable } from './MoviesTable';\nimport { MovieSearch } from './MovieSearch';\n\nfunction getVisibleMovies(movies, search) {\n  const filteredMovies = search.length < 2\n    ? movies\n    : movies.filter((movie) => getMovieName(movie).toLowerCase().includes(search));\n\n  return sortMovies(filteredMovies);\n}\n\nfunction sortMovies(movies) {\n  return [...movies]\n    .sort((a, b) => getMovieDuration(b) - getMovieDuration(a));\n}\n\nfunction App() {\n  const [allMovies, setAllMovies] = React.useState([]);\n  const [search, setSearch] = React.useState('');\n\n  const onAddMovie = (movieToAdd) => {\n    const existingMovieIndex = allMovies\n      .findIndex((movie) => getMovieName(movie) === getMovieName(movieToAdd));\n\n    if (existingMovieIndex === -1) {\n      setAllMovies([...allMovies, movieToAdd]);\n    } else {\n      setAllMovies([\n        ...allMovies.slice(0, existingMovieIndex),\n        movieToAdd,\n        ...allMovies.slice(existingMovieIndex + 1),\n      ]);\n    }\n  };\n\n  const visibleMovies = getVisibleMovies(allMovies, search);\n\n  return (\n    <div>\n      <MovieForm\n        onSubmit={onAddMovie}\n      />\n      <MovieSearch\n        onChange={setSearch}\n        value={search}\n      />\n      <MoviesTable movies={visibleMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}